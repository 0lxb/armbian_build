#!/bin/bash
#
#    10-sysinfo - generate the system information
#    Copyright (c) 2015 Igor Pecovnik
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


storage=/dev/sda1

function displaytime {
  local T=$(cat /proc/uptime | awk '{print $1}' | sed 's/[.].*//')
  local D=$((T/60/60/24))
  local H=$((T/60/60%24))
  local M=$((T/60%60))
  local S=$((T%60))
  local time=$S
  time=$S" sec"
  (( $M > 0 )) && time=$M" min"
  (( $H > 0 )) && time=$H" hour"
  (( $H > 1 )) && time=$H" hours"
  (( $D > 0 )) && time=$D" day"
  (( $D > 1 )) && time=$D" days"
  #printf "Up time:  \x1B[92m\t\t%s\t\x1B[0m" "$time"  
  printf "%-13s%s" "Up time:"
  printf "\x1B[92m%-10s\x1B[0m\t\t" " $time"
}


function display()
# $1=name $2=value $3=red_limit $4=minimal_show_limit $5=unit $6=after $7=acs/desc
{
# battery red color is opposite, lower number
if [[ "$1" == "Battery" ]]; then local great="<"; else local great=">"; fi
if [[ -n "$2" && "$2" > "0" && (( "${2%.*}" -ge "$4" )) ]]; then
printf "%-14s%s" "$1:"
if (( $(echo "$2 $great $3" | bc -l) )); then echo -ne "\e[0;91m $2"; else echo -ne "\e[0;92m $2"; fi
printf "%-1s%s\x1B[0m" "$5"
printf "%-11s%s\t" "$6"
return 1
fi
}


# Battery info for Allwinner
axp_dir="/sys/power/axp_pmu"
if [[ -d "$axp_dir" ]]; then
	status_battery_connected=$(cat $axp_dir/status_battery_connected)
	battery_charge_current=$(cat $axp_dir/battery_charge_current)
	battery_discharge_current=$(cat $axp_dir/battery_discharge_current)
	battery_voltage=$(cat $axp_dir/battery_voltage)
	if [[ "$status_battery_connected" == "1" ]]; then
		# store maximum battery voltage to compare to
		if [ -f "/etc/default/battery" ]; then
			source "/etc/default/battery"
		else
			echo "MAX=$battery_voltage" > /etc/default/battery
			echo "MIN=3484000" >> /etc/default/battery			
			source "/etc/default/battery"
		fi
		# if we have new max value, alter defaults
		if [[ "$battery_discharge_current" -gt "0" && "$battery_voltage" -gt "$MAX" ]]; then 		
			MAX=$battery_voltage
			sed -e 's/MAX=.*/MAX='$battery_voltage'/g' -i /etc/default/battery
		fi
		# calculate percentage
		battery_percent=$(echo "($battery_voltage-$MIN)*100/($MAX-$MIN)"|bc)
		
		# dispay charging / percentage
		if [[ "$battery_charge_current" == "0" && "$battery_discharge_current" == "0" ]]; then
			battery_status=" charged"
			battery_percent=100
		elif [[ "$battery_charge_current" -gt "0" ]]; then
			battery_status=" charging"
			battery_percent=100
		else
			battery_status=" discharging"			
		fi
	fi
fi


load=$(cat /proc/loadavg | awk '{print $1}')
memory_usage=$(free | awk '/Mem/ {printf("%.0f",(($2-($4+$6+$7))/$2) * 100)}') 
memory_total=$(free -m |  awk '/Mem/ {print $(2)}') 
users=$(users | wc -w)
swap_total=$(free -m | awk '/Swap/ { printf("%3.0f", $3/$2*100) }' | sed 's/ //g')
swap_usage=${swap_usage//[!0-9]/} # to remove alfanumeric if swap not used
swap_total=$(free -m |  awk '/Swap/ {print $(2)}')
ip_address=$(ifconfig eth0 | sed -n '/inet addr/s/.*addr.\([^ ]*\) .*/\1/p')
root_usage=$(df -h / | awk '/\// {print $(NF-1)}' | sed 's/%//g')
root_total=$(df -h / | awk '/\// {print $(NF-4)}')
if [ -d "/dev/$storage" ]; then                              
	storage_usage=$(df -h $storage | grep $storage | awk '/\// {print $(NF-1)}' | sed 's/%//g')
	storage_total=$(df -h $storage | grep $storage | awk '/\// {print $(NF-4)}')
	hdd_temp=$(hddtemp -u C -nq $storage)
fi

# read temperature from two different locations
if [ -d "/sys/devices/virtual/thermal/thermal_zone0/" ]; then
	board_temp=$(cat /sys/devices/virtual/thermal/thermal_zone0/temp | awk '{printf("%d",$1/1000)}')
fi
if [[ -d "/sys/devices/virtual/thermal/thermal_zone1/" && $board_temp == "0" ]]; then
	board_temp=$(cat /sys/devices/virtual/thermal/thermal_zone1/temp | awk '{printf("%d",$1/1000)}')
fi

# read ambient temperature from USB device
if which temper >/dev/null; then
   TEMPER=$(temper -c)
   if echo $TEMPER | egrep -qv "Couldn't find the USB device"; then
      TEMPER=$(echo "scale=1;${TEMPER}/1" | bc)
      TEMPER="- Ambient: ${TEMPER}"
   else
      TEMPER=""
   fi
fi

display "System load" "$load" "1" "0" "" "" 
displaytime
display "Local users" "$users" "3" "2" ""
echo "" # fixed newline
display "Memory usage" "$memory_usage" "10" "0" " %" " of $memory_total""Mb"
display "Swap usage" "$swap_usage" "10" "0" " %" " of $swap_total""Mb"
echo "" # fixed newline
a=0;b=0;c=0
display "Board temp" "$board_temp" "40" "0" "°C" "" ; a=$?
display "HDD temp" "$hdd_temp" "40" "0" "°C" "" ; b=$?
display "Ambient temp" "$amb_temp" "40" "0" "°C" "" ; c=$?
(( ($a+$b+$c) >0 )) && echo "" # new line only if some value is displayed
a=0;b=0;c=0
display "Battery" "$battery_percent" "20" "1" "%" "$battery_status" ; a=$?
(( ($a+$b+$c) >0 )) && echo "" # new line only if some value is displayed

display "Usage of /" "$root_usage" "90" "1" "%" " of $root_total"
display "storage/" "$storage_usage" "90" "1" "%" " of $storage_total"
echo ""
echo ""
