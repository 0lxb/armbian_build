#!/bin/bash

### BEGIN INIT INFO
# Provides:          firstrun
# Required-Start:    $all
# Required-Stop:
# Should-Start:      armhwinfo
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Armbian first run tasks
# Description:       Something needs to be done when is
#                    starting at first time.
### END INIT INFO

# Immediately exit if not called by init system
if [[ $1 != start ]]; then
	echo "Usage: $0 start" >&2
	exit 0
fi

. /etc/armbian-release
. /etc/os-release
. /lib/init/vars.sh
. /lib/lsb/init-functions

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
Log=/var/log/armhwinfo.log

# create helper script to set swap settings
cat > /tmp/create_swap.sh <<EOT
#!/bin/bash
# 
# create swap and adds it into fstab
#
# update console info
setupcon --save
# SSH Keys creation
rm -f /etc/ssh/ssh_host*
read entropy_before </proc/sys/kernel/random/entropy_avail
dpkg-reconfigure openssh-server >/dev/null 2>&1
read entropy_after </proc/sys/kernel/random/entropy_avail
echo -e "### [firstrun] Recreated SSH keys (entropy: \${entropy_before} \${entropy_after})" >>${Log}
MEMTOTAL=$(( $(awk -F" " '/^MemTotal/ {print $2}' </proc/meminfo) / 1024 ))
FREESIZE=\$(df -hm / | awk '/\// {print \$(NF-2)}')
SWAPFILE=/var/swap
if [[ ! -f \$SWAPFILE && \$FREESIZE -gt 132 ]]; then
fallocate -l 128M \$SWAPFILE >/dev/null 2>&1
if [[ \$? -ne 0 ]]; then dd if=/dev/zero of=\$SWAPFILE bs=1M count=128 status=noxfer >/dev/null 2>&1; fi
chown root:root \$SWAPFILE
chmod 0600 \$SWAPFILE
mkswap \$SWAPFILE >/dev/null 2>&1
swapon \$SWAPFILE >/dev/null 2>&1
if ! grep -q swap /etc/fstab; then echo "\$SWAPFILE					none		swap	sw								0	0" >> /etc/fstab; fi
if ! grep -q swap /etc/sysctl.conf; then echo "vm.swappiness=0" >> /etc/sysctl.conf; fi
echo -e "\n### [firstrun] Created 128MB emergency swap as \$SWAPFILE" >>${Log}
fi
while [[ -f /tmp/firstrun_running ]]; do sleep 1; done
if [[ -f /var/run/reboot ]]; then
	wall -n "Performing automatic reboot in 5 seconds"
	sleep 5
	reboot
fi
rm -f /tmp/create_swap.sh
sync &
EOT
chmod +x /tmp/create_swap.sh

do_expand_rootfs() {
	local rootpart=$(findmnt -n -o SOURCE /) # i.e. /dev/mmcblk0p1
	local rootdevice=$(lsblk -n -o PKNAME $rootpart) # i.e. mmcblk0
	local rootdevicepath="/dev/$rootdevice" # i.e. /dev/mmcblk0
	# get count of partitions and their boundaries
	local partitions=$(( $(grep -c $rootdevice /proc/partitions) - 1 ))
	local partstart=$(parted $rootdevicepath unit s print -sm | tail -1 | cut -d: -f2 | sed 's/s//') # start of first partition
	local partend=$(parted $rootdevicepath unit s print -sm | head -3 | tail -1 | cut -d: -f3 | sed 's/s//') # end of first partition
	local startfrom=$(( $partend + 1 ))
	[[ $partitions == 1 ]] && startfrom=$partstart
	echo "rootpart: $rootpart" >> $Log
	echo "rootdevice: $rootdevice" >> $Log
	echo "rootdevicepath: $rootdevicepath" >> $Log
	echo "partitions: $partitions" >> $Log

	# check whether a resizing rule is defined. We will take this value if it's not too low. In
	# this case the value will be ignored and resizing to the whole card size happens.
	if [[ -f /root/.rootfs_resize ]]; then
		read RESIZE_VALUE <"/root/.rootfs_resize"
		ResizeLog="Resize rule $RESIZE_VALUE defined for root partition"
		case $RESIZE_VALUE in
			*%)
				# percentage value, we try to use 16MiB to align partitions since this is
				# the erase block size of more recent SD cards (512 byte sectors, so we use 32
				# as divider and substract 1)
				local percentage=$(echo $RESIZE_VALUE | tr -c -d '[:digit:]')
				local lastsector=$(( 32 * $(parted $rootdevicepath unit s print -sm | grep "^$rootdevicepath" | awk -F":" "{printf (\"%0d\", ( \$2 * $percentage / 3200))}") - 1 ))
				[[ $lastsector -lt $partend ]] && unset lastsector
				;;
			*s)
				# sector value, we use it directly
				local lastsector=$(echo $RESIZE_VALUE | tr -c -d '[:digit:]')
				[[ $lastsector -lt $partend ]] && unset lastsector
				;;
		esac
	else
		# Unattended mode. We run a q&d benchmark to be able to identify cards way too slow easily
		echo -e "\n### quick iozone test:$(cd /root; iozone -e -I -a -s 1M -r 4k -i 0 -i 1 -i 2 | grep '^            1024' | sed 's/            1024      //')" >> $Log

		# check device capacity. If 4GB or below do not use whole card but leave a 5% spare area
		# to help older cards with wear leveling and garbage collection. In case this reduced card
		# capacity is less than the actual image capacity this is a clear sign that someone wants
		# to use Armbian on a card of inappropriate size so he gets what he deserves (at least he
		# should know what he's doing)
		local capacity=$(( $(lsblk -n -b -d -o SIZE $rootdevicepath) / 1024 / 1024 / 1024 )) # GiB
		if [[ $capacity -lt 5 ]]; then # 4 GiB or less
			local sparearea=200
			local lastsector=$(parted $rootdevicepath unit s print -sm | grep "^$rootdevicepath" | awk -F":" "{print \$2 - ($sparearea * 1024 * ( 1024 / \$4 ))}")
			if [[ $lastsector -lt $partend ]]; then
				unset lastsector
			else
				ResizeLog="4GB media so leaving 200MB spare area"
			fi
		elif [[ $CAPACITY -lt 9 ]]; then # 8 GiB or less
			# Leave 2 percent unpartitioned
			local lastsector=$(( 32 * $(parted $rootdevicepath unit s print -sm | grep "^$rootdevicepath" | awk -F":" "{printf (\"%0d\", ( \$2 * 98 / 3200))}") -1 ))
			if [[ $lastsector -lt $partend ]]; then
				unset lastsector
			else
				ResizeLog="8GB media so leaving 2 percent spare area"
			fi
		else
			# Leave 1 percent unpartitioned
			local lastsector=$(( 32 * $(parted $rootdevicepath unit s print -sm | grep "^$rootdevicepath" | awk -F":" "{printf (\"%0d\", ( \$2 * 99 / 3200))}") -1 ))
			if [[ $lastsector -lt $partend ]]; then
				unset lastsector
			else
				ResizeLog="Leaving 1 percent spare area"
			fi
		fi
	fi

	# Start resizing
	echo -e "\n### [firstrun] ${ResizeLog}. Start resizing Partition now:\n" >>${Log}
	cat /proc/partitions >>${Log}
	echo -e "\nExecuting fdisk, fsck and partprobe:" >>${Log}
	UtilLinuxVersion=$(echo q | fdisk $rootdevicepath | awk -F"util-linux " '/ fdisk / {print $2}')
	if [[ $partitions == 1 ]]; then
		case ${UtilLinuxVersion} in
			2.27.1*)
				# if dealing with fdisk from util-linux 2.27.1 we need a workaround for just 1 partition
				# https://github.com/igorpecovnik/lib/issues/353#issuecomment-224728506
				((echo d; echo n; echo p; echo ; echo $startfrom; echo $lastsector ; echo w;) | fdisk $rootdevicepath) >>${Log} 2>&1 || true
				;;
			*)
				((echo d; echo $partitions; echo n; echo p; echo ; echo $startfrom; echo $lastsector ; echo w;) | fdisk $rootdevicepath) >>${Log} 2>&1 || true
				;;
		esac
	else
		((echo d; echo $partitions; echo n; echo p; echo ; echo $startfrom; echo $lastsector ; echo w;) | fdisk $rootdevicepath) >>${Log} 2>&1 || true
	fi
	s=0
	fsck $root_partition >>${Log} 2>&1 || true
	partprobe $rootdevicepath >>${Log} 2>&1 || s=$?
	echo -e "\nNew partition table:\n" >>${Log}
	cat /proc/partitions >>${Log}
	echo -e "\nNow executing resize2fs to enlarge rootfs to the maximum:\n" >>${Log}
	resize2fs $rootpart >>${Log} 2>&1 || true

	# check whether reboot is necessary for resize2fs to take effect
	local freesize=$(df -hm / | awk '/\// {print $(NF-2)}')
	if [[ $s != 0 || $freesize -lt 152 ]]; then
		touch /var/run/reboot
		update-rc.d resize2fs defaults >/dev/null 2>&1
		echo -e "\n### [firstrun] Automated reboot needed to let /etc/init.d/resize2fs do the job" >>${Log}
	fi
} # do_expand_rootfs

do_firstrun_automated_user_configuration()
{
	#-----------------------------------------------------------------------------
	#Notes:
	# - See /boot/armbian_first_run.txt for full list of available variables
	# - Variable names here must here must match ones in config/armbian_first_run.txt

	#-----------------------------------------------------------------------------
	#Config FP
	local fp_config='/boot/armbian_first_run.txt'

	#-----------------------------------------------------------------------------
	#Grab user requested settings
	if [[ -f $fp_config ]]; then

		# Convert line endings to Unix from Dos
		sed -i $'s/\r$//' "$fp_config"

		# check syntax
		bash -n "$fp_config" || return

		# Load vars directly from file
		source "$fp_config"

		#-----------------------------------------------------------------------------
		# - Remove configuration file
		if [[ $FR_general_delete_this_file_after_completion == 1 ]]; then
			dd if=/dev/urandom of="$fp_config" bs=16K count=1
			sync
			rm "$fp_config"
		fi

		#-----------------------------------------------------------------------------
		# Set Network
		if [[ $FR_net_change_defaults == 1 ]]; then
			# - Get 1st index of available wlan and eth adapters
			local fp_ifconfig_tmp='/tmp/.ifconfig'
			ifconfig -a > "$fp_ifconfig_tmp" #export to file, should be quicker in loop than calling ifconfig each time.

			# find eth[0-9]
			for ((i=0; i<=9; i++))
			do
				if (( $(cat "$fp_ifconfig_tmp" | grep -ci -m1 "eth$i") )); then
					eth_index=$i
					break
				fi
			done

			# find wlan[0-9]
			for ((i=0; i<=9; i++))
			do
				if (( $(cat "$fp_ifconfig_tmp" | grep -ci -m1 "wlan$i") )); then
					wlan_index=$i
					break
				fi
			done

			rm "$fp_ifconfig_tmp"

			# - Kill dhclient
			killall -w dhclient

			# - Drop Connections
			ifdown eth$eth_index --force
			ifdown wlan$wlan_index --force

			# - Wifi enable
			if [[ $FR_net_wifi_enabled == 1 ]]; then

				#Enable Wlan, disable Eth
				FR_net_ethernet_enabled=0
				sed -i "/allow-hotplug wlan$wlan_index/c\allow-hotplug wlan$wlan_index" /etc/network/interfaces
				sed -i "/allow-hotplug eth$eth_index/c\#allow-hotplug eth$eth_index" /etc/network/interfaces

				#Set SSid (covers both WEP and WPA)
				sed -i "/wireless-essid /c\   wireless-essid $FR_net_wifi_ssid" /etc/network/interfaces
				sed -i "/wpa-ssid /c\   wpa-ssid $FR_net_wifi_ssid" /etc/network/interfaces

				#Set Key (covers both WEP and WPA)
				sed -i "/wireless-key /c\   wireless-key $FR_net_wifi_key" /etc/network/interfaces
				sed -i "/wpa-psk /c\   wpa-psk $FR_net_wifi_key" /etc/network/interfaces

				#Set wifi country code
				iw reg set "$FR_net_wifi_countrycode"

				#Disable powersaving for known chips that suffer from powersaving features causing connection dropouts.
				#	This is espically true for the 8192cu and 8188eu.
				#FOURDEE: This may be better located as default in ARMbian during build (eg: common), as currently, not active until after a reboot.
				# - Realtek | all use the same option, so create array.
				local realtek_array=(
					"8192cu"
					"8188eu"
				)

				for ((i=0; i<${#realtek_array[@]}; i++))
				do
					echo -e "options ${realtek_array[$i]} rtw_power_mgnt=0" > /etc/modprobe.d/realtek_"${realtek_array[$i]}".conf
				done

				unset realtek_array

			# - Ethernet enable
			elif [[ $FR_net_ethernet_enabled == 1 ]]; then

				#Enable Eth, disable Wlan
				FR_net_wifi_enabled=0
				sed -i "/allow-hotplug eth$eth_index/c\allow-hotplug eth$eth_index" /etc/network/interfaces
				#sed -i "/allow-hotplug wlan$wlan_index/c\#allow-hotplug wlan$wlan_index" /etc/network/interfaces

			fi

			# - Static IP enable
			if [[ $FR_net_use_static == 1 ]]; then
				if [[ $FR_net_wifi_enabled == 1 ]]; then
					sed -i "/iface wlan$wlan_index inet/c\iface wlan$wlan_index inet static" /etc/network/interfaces
				elif [[ $FR_net_ethernet_enabled == 1 ]]; then
					sed -i "/iface eth$eth_index inet/c\iface eth$eth_index inet static" /etc/network/interfaces
				fi

				#This will change both eth and wlan entries, however, as only 1 adapater is enabled by this feature, should be fine.
				sed -i "/^#address/c\address $FR_net_static_ip" /etc/network/interfaces
				sed -i "/^#netmask/c\netmask $FR_net_static_mask" /etc/network/interfaces
				sed -i "/^#gateway/c\gateway $FR_net_static_gateway" /etc/network/interfaces
				sed -i "/^#dns-nameservers/c\dns-nameservers $FR_net_static_dns" /etc/network/interfaces
			fi

			# - Restart Networking
			if [[ "$DISTRIBUTION" == "wheezy" || "$DISTRIBUTION" == "trusty" ]]; then
				service networking restart
			else
				systemctl daemon-reload
				systemctl restart networking
			fi

			# - Manually bring up adapters (just incase)
			if [[ $FR_net_wifi_enabled == 1 ]]; then
				ifup wlan$wlan_index
			elif [[ $FR_net_ethernet_enabled == 1 ]]; then
				ifup eth$eth_index
			fi
		fi
	fi
} #do_firstrun_automated_user_configuration

main() {
	touch /tmp/firstrun_running

	# tweaks
	# enable BT on cubietruck
	[[ "$BOARD" == "cubietruck" ]] && update-rc.d brcm40183-patch defaults
	# enable BT on Banana M2+, NanoPi Air or NanoPi M1 Plus
	[[ "$BOARD" == "bananapim2plus" || "$BOARD" == "nanopiair" || "$BOARD" == "nanopim1plus" ]] && update-rc.d ap6212-bluetooth defaults
	# enable BT on Solidrun i.MX boards
	[[ "$BOARD" == "Cubox i2eX/i4" ]] && update-rc.d brcm4330-patch defaults && /etc/init.d/brcm4330-patch start

	if [[ $(findmnt -n -o FSTYPE /) == ext4 && ! -f /root/.no_rootfs_resize ]]; then
		do_expand_rootfs
	fi

	do_firstrun_automated_user_configuration &

	/tmp/create_swap.sh &

	# some hardware workarounds
	case $LINUXFAMILY in
		sun7i|sun8i)
			# set some mac address for BT
			[[ -n $(lsmod | grep dhd) ]] && \
				(MACADDR=$(printf '43:29:B1:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256]) ; \
				sed -i "s/^MAC_ADDR=.*/MAC_ADDR=${MACADDR}/" /etc/default/brcm40183 ;\
				sed -i "s/^MAC_ADDR=.*/MAC_ADDR=${MACADDR}/" /etc/default/ap6212 \
				echo -e "\n### [firstrun] Use MAC address ${MACADDR} for Bluetooth from now" >>${Log})

			case $BOARD_NAME in
				"NanoPi Air"|"Orange Pi Lite"|"NanoPi M1 Plus")
					# change serial port for BT on NanoPi Air and NanoPi M1 Plus
					sed -i "s/^PORT=.*/PORT=ttyS3/" /etc/default/ap6212
					# relink /etc/network/interfaces on OPi Lite and NanoPi Air
					cd /etc/network/ && ln -sf interfaces.network-manager interfaces
					;;
				"Orange Pi Zero")
					# set OPi Zero WiFi address permanently based on a random address using Allwinner's MAC prefix
					MACADDR=$(printf 'DC:44:6D:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])
			                echo "options xradio_wlan macaddr=${MACADDR}" >/etc/modprobe.d/xradio_wlan.conf
			                echo -e "\n### [firstrun] Use MAC address ${MACADDR} for Wi-Fi from now" >>${Log}
					cd /etc/network/ && ln -sf interfaces.network-manager interfaces
					(modprobe -r xradio_wlan && sleep 1 && modprobe xradio_wlan) &
					;;
			esac

			# trigger red or blue LED as user feedback
			echo heartbeat >/sys/class/leds/*red*/trigger 2>/dev/null || echo heartbeat >/sys/class/leds/*blue*/trigger 2>/dev/null
			;;
		pine64)
			if [[ -z $(grep ethaddr /boot/armbianEnv.txt) && -f /sys/class/net/eth0/address ]]; then
				echo "ethaddr=$(cat /sys/class/net/eth0/address)" >> /boot/armbianEnv.txt
			fi
			;;
	esac

	update-rc.d -f firstrun remove >/dev/null 2>&1
	rm /tmp/firstrun_running
} # main

main
